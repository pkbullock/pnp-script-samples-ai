{
  "Script": "inputs/script.ps1",
  "Prompt": "Produce a short descriptive paragraph around 75 words long, what the script is, anticipate its purpose. Here is the PowerShell script: \r\n# Example: .\\List-UrlsInPage.ps1 -SourceSitePartUrl \"SiteA\" -PartTenant \"contoso\"\r\n[CmdletBinding()]\r\nparam (\r\n    [Parameter(Mandatory = $true, HelpMessage = \"Source e.g. Intranet-Archive\")]\r\n    [string]$SourceSitePartUrl,\r\n    [Parameter(Mandatory = $false, HelpMessage = \"Organisation Url Fragment e.g. contoso \")]\r\n    [string]$PartTenant,\r\n    [string]$ReportName = \"URL-Report.csv\"\r\n)\r\nbegin{\r\n\r\n    $baseUrl = \"https://$($PartTenant).sharepoint.com\"\r\n    $sourceSiteUrl = \"$($baseUrl)/sites/$($SourceSitePartUrl)\"\r\n    \r\n    Write-Host \"Connecting to \" $sourceSiteUrl\r\n    \r\n    # For MFA Tenants - Interactive opens a browser window\r\n    Connect-PnPOnline -Url $sourceSiteUrl -Interactive\r\n    $filter = '<View>' +\r\n                '<Query>' +\r\n                    '<Where>' +\r\n                        '<And>' +\r\n                            '<Eq>'+\r\n                                '<FieldRef Name=\"FSObjType\" />'+\r\n                                '<Value Type=\"Integer\">0</Value>'+\r\n                            '</Eq>'+\r\n                            '<Neq>'+\r\n                                '<FieldRef Name=\"_SPSitePageFlags\" />'+\r\n                                '<Value Type=\"Text\">{Template}}</Value>'+\r\n                            '</Neq>'+\r\n                        '</And>' +\r\n                    '</Where>' +\r\n                '</Query>' +\r\n            '</View>'\r\n\r\n    $loc = Get-Location\r\n    $reportPath = \"$($loc)\\$($ReportName)\"\r\n\r\n    '\"WebTitle\",\"WebUrl\",\"PageFileName\",\"WebPartTitle\",\"LinkTitle\",\"LinkUrl\"' | Out-File $reportPath\r\n}\r\nprocess{\r\n\r\n    Write-Host \"Reading pages in site...\"\r\n\r\n    $web = Get-PnPWeb -Includes Title,Url\r\n    $webTitle = $web.Title\r\n    $webUrl = $web.Url\r\n    \r\n    $pages = Get-PnPListItem -List \"SitePages\" -Query $filter\r\n            \r\n    Foreach($page in $pages){\r\n\r\n        $file = $page.FieldValues[\"FileLeafRef\"]\r\n\r\n        Write-Host \" Processing Page $($file)\" -ForegroundColor Cyan\r\n\r\n        $components = Get-PnPPageComponent -Page $file\r\n        \r\n        # To find the Web Part ID:\r\n        # Get-PnPPageComponent -Page \"MyPage.aspx\" -ListAvailable\r\n\r\n        # You can filter based on type of web part\r\n        # c70391ea-0b10-4ee9-b2b4-006d3fcad0cd QuickLinksWebPart\r\n        $summaryLinks = $components | Where-Object { $_.WebPartId -eq 'c70391ea-0b10-4ee9-b2b4-006d3fcad0cd'}\r\n        Write-Host \"Found $($summaryLinks.Count) Summary Links\" -ForegroundColor Yellow\r\n\r\n        $summaryLinks | Foreach-Object{\r\n\r\n            $wpTitle = $_.title\r\n            Write-Host \"Web Part Title: $($wpTitle)\"\r\n\r\n            $serverContent = $_.ServerProcessedContent | ConvertFrom-Json -AsHashTable\r\n            $itemCount = $serverContent.links.Count\r\n\r\n            #{htmlStrings, searchablePlainTexts, imageSources, links...}\r\n            Write-Host \"Item Count: $($itemCount)\"\r\n            \r\n            For($i = 0; $i -lt $itemCount; $i++){\r\n\r\n                $titlePath = \"items[$($i)].title\"\r\n                $urlPath = \"items[$($i)].sourceItem.url\"\r\n\r\n                $lnkTitle = $serverContent.searchablePlainTexts.$titlePath\r\n                $lnkUrl = $serverContent.links.$urlPath\r\n\r\n                if($lnkTitle -and $lnkUrl){\r\n\r\n                    Write-Host \"    Link Title: $($lnkTitle)\" -ForegroundColor Cyan\r\n                    Write-Host \"    Link URL: $($lnkUrl)\" -ForegroundColor Cyan\r\n    \r\n                    $line = '\"' + $webTitle + '\",\"' + `\r\n                        $webUrl + '\",\"' + `\r\n                        $file + '\",\"' + `\r\n                        $wpTitle  + '\",\"' + `\r\n                        $lnkTitle + '\",\"' + `\r\n                        $lnkUrl + '\"'\r\n    \r\n                    $line | Out-File $reportPath -Append\r\n    \r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n",
  "SystemPrompt": "You are a helpful analyser of PowerShell scripts that will be used to produce title and description of what the script intended function. Intended to give readers of the PowerShell script, a friendly message to describe what the script is about. The PowerShell scripts can be based on the Microsoft services such as Microsoft 365, SharePoint, Azure, Power Platform, Teams, Security and Compliance. The response should include a Title, Description, Assumptions, and Dependencies result in JSON format. Here is an example: {  \"Title\": \"Title of the Script\", \"Purpose\": \"Purpose of the Script\",    \"Dependencies\": [\"Connect-PnPOnline\", \"Get-PnPListItem\"],  \"Assumptions\": [{ \"SourceSitePartURLRequired\": true,      \"TenantFilterOptional\": false    }  ]}",
  "LocalModelResults": [
    {
      "Model": "phi3.5:3.8b-mini-instruct-q4_0",
      "ModelResultDescription": "{\n \"Title\": \"List URLs in SharePoint Site Pages\",\n \"Purpose\": \"This PowerShell script extracts and lists all the links from each page within a specified site, including details like web title, URL of the source item for every link found on that specific webpage.\",\n \"Dependencies\": [\"Connect-PnPOnline\",\"Get-PnPListItem\"], \n \"Assumptions\": [{\"SourceSitePartURLRequired\":\"true\", \"TenantFilterOptional\":\"false\"}]\n}\n",
      "ModelResultObject": {
        "Title": "List URLs in SharePoint Site Pages",
        "Purpose": "This PowerShell script extracts and lists all the links from each page within a specified site, including details like web title, URL of the source item for every link found on that specific webpage.",
        "Dependencies": [
          "Connect-PnPOnline",
          "Get-PnPListItem"
        ],
        "Assumptions": [
          {
            "SourceSitePartURLRequired": "true",
            "TenantFilterOptional": "false"
          }
        ]
      },
      "ExecutionTimeInSeconds": 7.7896245
    }
  ]
}
