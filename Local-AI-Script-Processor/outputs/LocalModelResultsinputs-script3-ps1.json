{
  "Script": "inputs/script3.ps1",
  "Prompt": "Please produce a short descriptive paragraph around 150 words long, what the PowerShell script is, anticipate its purpose. The response should include a Title, Description, Assumptions, and Dependencies.  \\n Here is the PowerShell script to use for the descripion: Clear-Host\r\n\r\n$properties=@{SiteUrl='';SiteTitle='';ListTitle='';SensitivityLabel='';Type='';RelativeUrl='';ParentGroup='';MemberType='';MemberName='';MemberLoginName='';Roles='';}; \r\n \r\n$dateTime = (Get-Date).toString(\"dd-MM-yyyy-hh-ss\")\r\n$invocation = (Get-Variable MyInvocation).Value\r\n$directorypath = (Split-Path $invocation.MyCommand.Path) + \"\\\"\r\n$excludeLimitedAccess = $true;\r\n$includeListsItems = $true;\r\n\r\n$SiteCollectionUrl = Read-Host -Prompt \"Enter site collection URL \";\r\n$global:siteTitle= \"\";\r\n#Exclude certain libraries\r\n$ExcludedLibraries = @(\"Form Templates\", \"Preservation Hold Library\", \"Site Assets\", \"Images\", \"Pages\", \"Settings\", \"Videos\",\"Timesheet\"\r\n  \"Site Collection Documents\", \"Site Collection Images\", \"Style Library\", \"AppPages\", \"Apps for SharePoint\", \"Apps for Office\")\r\n\r\n$global:permissions =@();\r\n$global:sharingLinks = @();\r\n\r\nfunction Get-ListItems_WithUniquePermissions{\r\n  param(\r\n      [Parameter(Mandatory)]\r\n      [Microsoft.SharePoint.Client.List]$List\r\n  )\r\n  $selectFields = \"ID,HasUniqueRoleAssignments,FileRef,FileLeafRef,FileSystemObjectType\"\r\n \r\n  $Url = $siteUrl + '/_api/web/lists/getbytitle(''' + $($list.Title) + ''')/items?$select=' + $($selectFields)\r\n  $nextLink = $Url\r\n  $listItems = @()\r\n  $Stoploop =$true\r\n  while($nextLink){  \r\n      do{\r\n      try {\r\n          $response = invoke-pnpsprestmethod -Url $nextLink -Method Get\r\n          $Stoploop =$true\r\n  \r\n      }\r\n      catch {\r\n          write-host \"An error occured: $_  : Retrying\" -ForegroundColor Red\r\n          $Stoploop =$true\r\n          Start-Sleep -Seconds 30\r\n      }\r\n  }\r\n  While ($Stoploop -eq $false)\r\n  \r\n      $listItems += $response.value | where-object{$_.HasUniqueRoleAssignments -eq $true}\r\n      if($response.'odata.nextlink'){\r\n          $nextLink = $response.'odata.nextlink'\r\n      }    else{\r\n          $nextLink = $null\r\n      }\r\n  }\r\n\r\n  return $listItems\r\n}\r\n\r\nFunction PermissionObject($_object,$_type,$_relativeUrl,$_siteUrl,$_siteTitle,$_listTitle,$_memberType,$_parentGroup,$_memberName,$_memberLoginName,$_roleDefinitionBindings,$_sensitivityLabel)\r\n{\r\n  $permission = New-Object -TypeName PSObject -Property $properties; \r\n  $permission.SiteUrl =$_siteUrl; \r\n  $permission.SiteTitle = $_siteTitle; \r\n  $permission.ListTitle = $_listTitle; \r\n  $permission.SensitivityLabel = $_sensitivityLabel; \r\n  $permission.Type =  $_Type -eq 1 ? \"Folder\" : $_Type -eq 0 ? \"File\" : $_Type;\r\n  $permission.RelativeUrl = $_relativeUrl; \r\n  $permission.MemberType = $_memberType; \r\n  $permission.ParentGroup = $_parentGroup; \r\n  $permission.MemberName = $_memberName; \r\n  $permission.MemberLoginName = $_memberLoginName; \r\n  $permission.Roles = $_roleDefinitionBindings -join \",\"; \r\n  $global:permissions += $permission;\r\n}\r\n\r\nFunction Extract-Guid ($inputString) {\r\n  $splitString = $inputString -split '\\|'\r\n  return $splitString[2].TrimEnd('_o')\r\n}\r\n\r\nFunction QueryUniquePermissionsByObject($_ctx,$_object,$_Type,$_RelativeUrl,$_siteUrl,$_siteTitle,$_listTitle)\r\n{\r\n  $roleAssignments = Get-PnPProperty -ClientObject $_object -Property RoleAssignments\r\n   switch ($_Type) {\r\n    0 { $sensitivityLabel = $_object.FieldValues[\"_DisplayName\"] }\r\n    1 { $sensitivityLabel = $_object.FieldValues[\"_DisplayName\"] }\r\n    \"Site\" { $sensitivityLabel = (Get-PnPSiteSensitivityLabel).displayname }\r\n    default { \" \" }\r\n}\r\n  foreach($roleAssign in $roleAssignments){\r\n    Get-PnPProperty -ClientObject $roleAssign -Property RoleDefinitionBindings,Member;\r\n    $PermissionLevels = $roleAssign.RoleDefinitionBindings | Select -ExpandProperty Name;\r\n    #Get all permission levels assigned (Excluding:Limited Access)  \r\n    if($excludeLimitedAccess -eq $true){\r\n       $PermissionLevels = ($PermissionLevels | Where { $_ -ne \"Limited Access\"}) -join \",\"  \r\n    }\r\n    $Users = Get-PnPProperty -ClientObject ($roleAssign.Member) -Property Users -ErrorAction SilentlyContinue\r\n    #Get Access type\r\n    $AccessType = $roleAssign.RoleDefinitionBindings.Name\r\n    $MemberType = $roleAssign.Member.GetType().Name; \r\n    #Get the Principal Type: User, SP Group, AD Group  \r\n    $PermissionType = $roleAssign.Member.PrincipalType  \r\n  if( $_Type -eq 0){\r\n      $sharingLinks = Get-PnPFileSharingLink -Identity $_object.FieldValues[\"FileRef\"]\r\n  }\r\n  if( $_Type -eq 1){\r\n      $sharingLinks = Get-PnPFolderSharingLink -Folder $_object.FieldValues[\"FileRef\"]\r\n  }\r\n\r\n    If($PermissionLevels.Length -gt 0) {\r\n      $MemberType = $roleAssign.Member.GetType().Name; \r\n       #Sharing link is in the format SharingLinks.03012675-2057-4d1d-91e0-8e3b176edd94.OrganizationView.20d346d3-d359-453b-900c-633c1551ccaa\r\n        If ($roleAssign.Member.Title -like \"SharingLinks*\")\r\n        {\r\n          if($sharingLinks){\r\n          $sharingLinks | where-object {$roleAssign.Member.Title -match $_.Id } | ForEach-Object{\r\n            If ($Users.Count -gt 0) \r\n            {\r\n                ForEach ($User in $Users)\r\n                {\r\n                PermissionObject $_object $_Type $_RelativeUrl $_siteUrl $_siteTitle $_listTitle \"Sharing Links\" $roleAssign.Member.LoginName  $user.Title $User.LoginName $_.Link.Type $sensitivityLabel; \r\n                }\r\n            } \r\n            else {\r\n              PermissionObject $_object $_Type $_RelativeUrl $_siteUrl $_siteTitle $_listTitle \"Sharing Links\" $roleAssign.Member.LoginName  $_.Link.Scope \"\" $_.Link.Type  $sensitivityLabel;\r\n            }\r\n          }  \r\n        }\r\n        <#  \r\n        If ($Users.Count -gt 0) \r\n            {\r\n                ForEach ($User in $Users)\r\n                {\r\n                PermissionObject $_object $_Type $_RelativeUrl $_siteUrl $_siteTitle $_listTitle \"Sharing Links\" $roleAssign.Member.LoginName  $user.Title $User.LoginName $AccessType $sensitivityLabel; \r\n                }\r\n            } \r\n            else{\r\n              if($sharingLinks){\r\n                $sharingLinks | where-object {$roleAssign.Member.Title -match $_.Id } | ForEach-Object{\r\n                  PermissionObject $_object $_Type $_RelativeUrl $_siteUrl $_siteTitle $_listTitle \"Sharing Links\" $roleAssign.Member.Title  $_.Link.Scope \"\" $_.Link.Type $sensitivityLabel;\r\n                }\r\n              }\r\n              else{\r\n                #find whether the sharing link is organisation or anyone\r\n                PermissionObject $_object $_Type $_RelativeUrl $_siteUrl $_siteTitle $_listTitle \"Sharing Links\" $roleAssign.Member.Title  \"All\"  $roleAssign.Member.Title $roleAssign.RoleDefinitionBindings.Description $sensitivityLabel;\r\n              }\r\n            }#>\r\n        }\r\n      ElseIf($MemberType -eq \"Group\" -or $MemberType -eq \"User\")\r\n      { \r\n        $MemberName = $roleAssign.Member.Title; \r\n        $MemberLoginName = $roleAssign.Member.LoginName;    \r\n        if($MemberType -eq \"User\")\r\n        {\r\n          $ParentGroup = \"NA\";\r\n        }\r\n        else\r\n        {\r\n          $ParentGroup = $MemberName;\r\n        }\r\n        (PermissionObject $_object $_Type $_RelativeUrl $_siteUrl $_siteTitle $_listTitle $MemberType $ParentGroup $MemberName $MemberLoginName $PermissionLevels $sensitivityLabel); \r\n      }\r\n\r\n      if($_Type  -eq \"Site\" -and $MemberType -eq \"Group\")\r\n      {\r\n        $sensitivityLabel = (Get-PnPSiteSensitivityLabel).DisplayName\r\n        If($PermissionType -eq \"SharePointGroup\")  {  \r\n          #Get Group Members  \r\n          $groupUsers = Get-PnPGroupMember -Identity $roleAssign.Member.LoginName                  \r\n          $groupUsers|foreach-object{ \r\n            if ($_.LoginName.StartsWith(\"c:0o.c|federateddirectoryclaimprovider|\") -and $_.LoginName.EndsWith(\"_0\")) {\r\n              $guid = Extract-Guid $_.LoginName\r\n              \r\n              Get-PnPMicrosoft365GroupOwners -Identity $guid | ForEach-Object {\r\n                $user = $_\r\n                (PermissionObject $_object \"Site\" $_RelativeUrl $_siteUrl $_siteTitle \"\" \"GroupMember\" $roleAssign.Member.LoginName $user.DisplayName $user.UserPrincipalName $PermissionLevels $sensitivityLabel); \r\n              }\r\n            }\r\n            elseif ($_.LoginName.StartsWith(\"c:0o.c|federateddirectoryclaimprovider|\")) {\r\n              $guid = Extract-Guid $_.LoginName\r\n              \r\n              Get-PnPMicrosoft365GroupMembers -Identity $guid | ForEach-Object {\r\n                $user = $_\r\n                (PermissionObject $_object \"Site\" $_RelativeUrl $_siteUrl $_siteTitle \"\" \"GroupMember\" $roleAssign.Member.LoginName $user.DisplayName $user.UserPrincipalName $PermissionLevels $sensitivityLabel); \r\n              }\r\n            }\r\n\r\n            (PermissionObject $_object \"Site\" $_RelativeUrl $_siteUrl $_siteTitle \"\" \"GroupMember\" $roleAssign.Member.LoginName $_.Title $_.LoginName $PermissionLevels $sensitivityLabel);   \r\n          }\r\n        }\r\n      } \r\n    }      \r\n  }\r\n}\r\nFunction QueryUniquePermissions($_web)\r\n{\r\n  ##query list, files and items unique permissions\r\n  Write-Host \"Querying web $($_web.Title)\";\r\n  $siteUrl = $_web.Url; \r\n \r\n  Write-Host $siteUrl -Foregroundcolor \"Red\"; \r\n  $global:siteTitle = $_web.Title; \r\n  $ll = Get-PnPList -Includes BaseType, Hidden, Title,HasUniqueRoleAssignments,RootFolder  -Connection $siteconn | Where-Object {$_.Hidden -eq $False -and $_.Title -notin $ExcludedLibraries } #$_.BaseType -eq \"DocumentLibrary\" \r\n  Write-Host \"Number of lists $($ll.Count)\";\r\n\r\n  QueryUniquePermissionsByObject $_web $_web \"Site\" \"\" $siteUrl $siteTitle  \"\";\r\n \r\n  foreach($list in $ll)\r\n  {      \r\n    $listUrl = $list.RootFolder.ServerRelativeUrl; \r\n    #Exclude internal system lists and check if it has unique permissions \r\n    if($list.Hidden -ne $True)\r\n    { \r\n      Write-Host $list.Title  -Foregroundcolor \"Yellow\"; \r\n      $listTitle = $list.Title; \r\n      #Check List Permissions \r\n      if($list.HasUniqueRoleAssignments -eq $True)\r\n      { \r\n        $Type = $list.BaseType.ToString(); \r\n        QueryUniquePermissionsByObject $_web $list $Type $listUrl $siteUrl $siteTitle $listTitle;\r\n      }\r\n      \r\n      if($includeListsItems){         \r\n        $collListItem =  Get-ListItems_WithUniquePermissions -List $list\r\n        $count = $collListItem.Count\r\n        Write-Host  \"Number of items with unique permissions: $count within list $listTitle\" \r\n        foreach($item in $collListItem) \r\n        {\r\n            $Type = $item.FileSystemObjectType; \r\n            $fileUrl = $item.FileRef;  \r\n            $i = Get-PnPListItem -List $list -Id $item.ID\r\n            QueryUniquePermissionsByObject $_web $i $Type $fileUrl $siteUrl $siteTitle $listTitle;\r\n        } \r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nif(Test-Path $directorypath){\r\n \r\n  Connect-PnPOnline -Url $SiteCollectionUrl -Interactive\r\n  #array storing permissions\r\n  $web = Get-PnPWeb\r\n  #root web , i.e. site collection level\r\n  QueryUniquePermissions($web);\r\n\r\n  Write-Host \"Permission count: $($global:permissions.Count)\";\r\n  $exportFilePath = Join-Path -Path $directorypath -ChildPath $([string]::Concat($siteTitle,\"-Permissions_\",$dateTime,\".csv\"));\r\n  \r\n  Write-Host \"Export File Path is:\" $exportFilePath\r\n  Write-Host \"Number of lines exported is :\" $global:permissions.Count\r\n \r\n  $global:permissions | Select-Object SiteUrl,SiteTitle,Type,SensitivityLabel,RelativeUrl,ListTitle,MemberType,MemberName,MemberLoginName,ParentGroup,Roles|Export-CSV -Path $exportFilePath -NoTypeInformation;\r\n  \r\n}\r\nelse{\r\n  Write-Host \"Invalid directory path:\" $directorypath -ForegroundColor \"Red\";\r\n}",
  "SystemPrompt": "You are a helpful analyser of PowerShell scripts that will be used to produce title and description of what the script intended function. Intended to give readers of the PowerShell script, a friendly message to describe what the script is about. The PowerShell scripts can be based on the Microsoft services such as Microsoft 365, SharePoint, Azure, Power Platform, Teams, Security and Compliance. The reponses should be in English and in JSON Format using this example: { \"Title\": \"Title of the Script\", \"Purpose\": \"Purpose of the Script\", \"LongDescription\": \"Describe what Powershell Script does\", \"Dependencies\": [\"Connect-PnPOnline\", \"Get-PnPListItem\"],  \"Assumptions\": [{ \"SourceSitePartURLRequired\": true, \"TenantFilterOptional\": false }]}.   If you don't know the answer, just say that you don't know, don't try to make up an answer",
  "LocalModelResults": [
    {
      "Model": "phi3.5:3.8b-mini-instruct-q4_0",
      "ModelResultDescription": "{\n  \"Title\": \"PowerShell Script for Querying Unique Permissions in SharePoint\",\n  \"Purpose\": \"The script is designed to query and extract unique permissions across site collections, lists, files, and items within a Microsoft PowerShell environment.\",\n  \"LongDescription\": \"This PowerShell script connects to the PnP Online module for interacting with Office 365 SharePoint sites. It retrieves information about each item's role assignments in various locations (site collection level, list/library levels) and extract unique permissions associated with them.\",\n  \"Dependencies\": [\"Connect-PnPOnline\", \"Get-ListItems_WithUniquePermissions\"],\n  \"Assumptions\": [\n    {\n      \"SourceSitePartURLRequired\": true, // Assumes the script requires a URL to source site part for connection.\n      \"TenantFilterOptional\": false // The tenant filter is not optional; it's necessary when connecting across multiple sites in different organizations or within multi-tenant environments like Microsoft 365.\n    }\n  ]\n}",
      "ModelResultObject": {
        "Title": "PowerShell Script for Querying Unique Permissions in SharePoint",
        "Purpose": "The script is designed to query and extract unique permissions across site collections, lists, files, and items within a Microsoft PowerShell environment.",
        "LongDescription": "This PowerShell script connects to the PnP Online module for interacting with Office 365 SharePoint sites. It retrieves information about each item's role assignments in various locations (site collection level, list/library levels) and extract unique permissions associated with them.",
        "Dependencies": [
          "Connect-PnPOnline",
          "Get-ListItems_WithUniquePermissions"
        ],
        "Assumptions": [
          {
            "SourceSitePartURLRequired": true,
            "TenantFilterOptional": false
          }
        ]
      },
      "ExecutionTimeInSeconds": 89.9908825,
      "ModelResponse": {
        "model": "phi3.5:3.8b-mini-instruct-q4_0",
        "created_at": "2024-10-27T11:52:12.4725834Z",
        "response": "{\n  \"Title\": \"PowerShell Script for Querying Unique Permissions in SharePoint\",\n  \"Purpose\": \"The script is designed to query and extract unique permissions across site collections, lists, files, and items within a Microsoft PowerShell environment.\",\n  \"LongDescription\": \"This PowerShell script connects to the PnP Online module for interacting with Office 365 SharePoint sites. It retrieves information about each item's role assignments in various locations (site collection level, list/library levels) and extract unique permissions associated with them.\",\n  \"Dependencies\": [\"Connect-PnPOnline\", \"Get-ListItems_WithUniquePermissions\"],\n  \"Assumptions\": [\n    {\n      \"SourceSitePartURLRequired\": true, // Assumes the script requires a URL to source site part for connection.\n      \"TenantFilterOptional\": false // The tenant filter is not optional; it's necessary when connecting across multiple sites in different organizations or within multi-tenant environments like Microsoft 365.\n    }\n  ]\n}",
        "done": true,
        "done_reason": "stop",
        "total_duration": 87964155300,
        "load_duration": 4208800,
        "prompt_eval_count": 3828,
        "prompt_eval_duration": 72857602000,
        "eval_count": 239,
        "eval_duration": 15101040000
      }
    }
  ],
  "Processed": false
}
